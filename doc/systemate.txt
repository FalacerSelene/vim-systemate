*systemate.txt*    Systemate - manage config across systems       *systemate*

                             SYSTEMATE MANUAL
                              VERSION: 0.1.0

1. About Systemate                                |systemate-about|
   1.1 Requirements                               |systemate-requirements|
2. Quick Start                                    |systemate-quickstart|
3. Commands                                       |systemate-commands|
   3.1 :Systemate                                 |:Systemate|
4. Configuration                                  |systemate-configuration|
   4.1 User Configuration                         |systemate-user-configuration|
   4.2 Variables Listing                          |systemate-variables|
       4.2.1 g:systemate                          |g:systemate|
       4.2.2 g:systemate_default                  |g:systemate_default|
       4.2.3 b:systemate_style                    |b:systemate_style|
5. Functions                                      |systemate-functions|
   5.1 systemate#CurrentStyle()                   |systemate#CurrentStyle()|
6. Errors                                         |systemate-errors|
   6.1 BADCONFIG                                  |BADCONFIG|
   6.2 NOSUCHSTYLE                                |NOSUCHSTYLE|

============================================================================
1. ABOUT SYSTEMATE ~
                                                            *systemate-about*

1.1 REQUIREMENTS                                     *systemate-requirements*
----------------

Systemate requires Vim version 7.4 or later, and only loads if the
'compatible' option is not set. It does not require Vim to be compiled with
any particular plugin language support.

============================================================================
2. QUICK START ~
                                                       *systemate-quickstart*

To start using systemate you need to set |g:systemate| in your vimrc. It
should be a dict of names of styles to lists of settings which apply in that
style. For example, if you wanted to set a style for use in the office which
requires you to use tabs rather than spaces, you might set it as follows: >
      let g:systemate = {}
      let g:systemate.office = {
        \   'settings' : {
        \     '&l:expandtab': 0
        \   }
        \ }

You would then be able to switch the settings on by running >
      :Systemate office
and off again by running >
      :Systemate DEFAULT

Alternatively, you can run |:Systemate| with no arguments to switch between
the two. If you set multiple entries inside |g:systemate|, then you also have
to specify |g:systemate_default| to be able to use the no-argument command.

============================================================================
3. COMMANDS ~
                                                         *systemate-commands*

*:Systemate*

This command has 2 forms - with no arguments and with 1 arguments. The one
arg form specifies a style to apply, where the style must exist in
|g:systemate| and the setting are configured as described in the
|systemate-configuration| section of this manual.

The 0 argument form does one of the following:
- If a style is currently in effect it unsets the currently active style.
- If no style is in effect then it has the same effect as
  `:execute 'Systemate' g:systemate_default`
  if |g:systemate_default| is set, otherwise it has the same effect as
  `:execute 'Systemate' values(g:systemate)[0]`
- If no style is in effect, |g:systemate_default| is not set, and there is
  not exactly one style set in |g:systemate|, a |BADCONFIG| error is
  signalled.

The 0 argument form also accepts a bang - `:Systemate!`. This always unsets
any currently active style.

============================================================================
4. CONFIGURATION ~
                                                    *systemate-configuration*

4.1 USER CONFIGURATION                         *systemate-user-configuration*
----------------------

4.2 VARIABLES LISTING                                   *systemate-variables*
---------------------

This sections describes all the (non-s:, non-l:) variables used by systemate.

g:systemate                                                     *g:systemate*

g:systemate_default                                     *g:systemate_default*

g:systemate_autoapply                                 *g:systemate_autoapply*

The following configuration settings are used internally and should not
normally be set.

b:systemate_style                                         *b:systemate_style*

The currently in-effect style & settings

============================================================================
5. FUNCTIONS ~
                                                        *systemate-functions*

systemate#CurrentStyleName()                   *systemate#CurrentStyleName()*
>
    let g:cur_style = systemate#CurrentStyleName()
<
Returns the name of the currently active style, or the empty string if no
style is currently active.

systemate#ApplyForFiletype()                   *systemate#ApplyForFiletype()*
>
    call systemate#ApplyForFiletype(filetype, style)
<
Apply a given named style for a given filetype. If the style does not exist,
then it will throw an error.

systemate#StyleSelectionDialogue()       *systemate#StyleSelectionDialogue()*
>
    let g:selected = systemate#StyleSelectionDialogue()
<
Open a style selection dialogue and get the user to select from all currently
available style names. Return the selected name.

systemate#SystemateCommand()                   *systemate#SystemateCommand()*
>
    call systemate#SystemateCommand(style)
<
Run a command as given with the `:Systemate` command, where `style` is the
single argument accepted by |:Systemate|

============================================================================
6. ERRORS ~
                                                           *systemate-errors*

This section documents all the errors which may be thrown during normal
operation. It does not include any native errors. All errors follow the
pattern >
    Systemate:ERRORNAMEINCAPS:Error detail

Therefore you can catch errors as follows >

    try
      systemate#DoSystemateThing()
    catch /^Systemate:.*/
      let [l:_, l:error_type, l:error_detail] =
        \ match(v:exception, '^Systemate:\([^:]*\):\(.*\)')
      echoerr 'Got error of type' l:error_type
      echoerr 'Error detail:' l:error_detail
    endtry

The following strings may occur as the error_type.

BADCONFIG                                                         *BADCONFIG*

This exception is thrown when some bit of config is invalid - for example
when `g:systemate` is an empty dictionary or when `%NULL%` is used for a `&`
prefixed setting.

NOSUCHSTYLE                                                     *NOSUCHSTYLE*

This exception is throw when the user attempts to set a style which is not
present in `g:systemate`. For example >

    let g:systemate = { "office": { "settings": { "&l:expandtab": 1 } } }
    Systemate foo

" vim: set expandtab sts=2 ts=2 sw=2 tw=77 cc=78 ft=help norl:
